---
- name: Set same timezone on every Server
  community.general.timezone:
    name: "{{ system_timezone }}"
  when: (system_timezone is defined) and (system_timezone != "Your/Timezone")

- name: Set SELinux to disabled state
  ansible.posix.selinux:
    state: disabled
  when: ansible_os_family == "RedHat"

- name: Enable IPv4 forwarding
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    state: present
    reload: true
  tags: sysctl

- name: Enable IPv6 forwarding
  ansible.posix.sysctl:
    name: net.ipv6.conf.all.forwarding
    value: "1"
    state: present
    reload: true
  tags: sysctl

- name: Enable IPv6 router advertisements
  ansible.posix.sysctl:
    name: net.ipv6.conf.all.accept_ra
    value: "2"
    state: present
    reload: true
  tags: sysctl

- name: Add br_netfilter to /etc/modules-load.d/
  copy:
    content: "br_netfilter"
    dest: /etc/modules-load.d/br_netfilter.conf
    mode: "u=rw,g=,o="
  when: ansible_os_family == "RedHat"

- name: Load br_netfilter
  community.general.modprobe:
    name: br_netfilter
    state: present
  when: ansible_os_family == "RedHat"

- name: Set bridge-nf-call-iptables (just to be sure)
  ansible.posix.sysctl:
    name: "{{ item }}"
    value: "1"
    state: present
    reload: true
  when: ansible_os_family == "RedHat"
  loop:
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-ip6tables
  tags: sysctl

- name: Add /usr/local/bin to sudo secure_path
  lineinfile:
    line: 'Defaults    secure_path = {{ secure_path[ansible_os_family] }}'
    regexp: "Defaults(\\s)*secure_path(\\s)*="
    state: present
    insertafter: EOF
    path: /etc/sudoers
    validate: 'visudo -cf %s'
  when: ansible_os_family in [ "RedHat", "Suse" ]

# - name: Set hostname by position in inventory
#   set_fact:
#     hostname: "{{ inventory_hostname }}"
#   when: inventory_hostname in groups['master'] or inventory_hostname in groups['node']

# - name: Update hostname for master hosts
#   set_fact:
#     hostname: "master-{{ groups['master'].index(inventory_hostname) + 1 }}"
#   when: inventory_hostname in groups['master']

# - name: Update hostname for node hosts
#   set_fact:
#     hostname: "worker-{{ groups['node'].index(inventory_hostname) + 1 }}"
#   when: inventory_hostname in groups['node']

# # TODO: qa
# - name: Change hostname of each host
#   ansible.builtin.hostname:
#     name: "{{ hostname }}"
#   when: inventory_hostname in groups['master'] or inventory_hostname in groups['node']

- name: Disable swap
  ansible.builtin.command: swapoff -a
  when: inventory_hostname in groups['master']

- name: Update /etc/fstab to disable swap
  lineinfile:
    line: 'UUID={{ ansible_mounts[0].uuid }} none swap sw 0 0'
    path: /etc/fstab
    state: absent
    backup: yes

# - name: Generate ssh key
#   community.crypto.openssh_keypair:
#     path: "{{ ansible_user_dir }}/.ssh/id_rsa"
#     size: 4096
#     state: present
#     force: no
#     mode: 0600

# - name: Set ownership of public key file
#   file:
#     path: '{{ ansible_user_dir }}/.ssh/id_rsa.pub'
#     owner: '{{ ansible_user }}'
#     group: '{{ ansible_user }}'
#   become: true

# TODO: The 'file' lookup had an issue accessing the file '/home/ubuntu/.ssh/id_rsa.pub'. file not found
# - name: Add ssh public key to authorized_keys
#   ansible.posix.authorized_key:
#     user: "{{ ansible_user }}"
#     state: present
#     # key: "{{ lookup('file', '{{ ansible_user_dir }}/.ssh/id_rsa.pub') }}"
#     key: "{{ lookup('file', '/home/.ssh/id_rsa.pub') }}"
